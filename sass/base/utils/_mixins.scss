/* ==========================================================================
   Mixins
   ========================================================================== */


/*
 * Mixin for clearfix
 * @include clearfix;
*/
@mixin clearfix {
	&:before,
	&:after {
	    content: " "; /* 1 */
	    display: table; /* 2 */
	}

	&:after {
	    clear: both;
	}
}

@mixin border-bottom {
	border-bottom: 1px solid $color_border;
}

@mixin border-box {
	border: 1px solid $color_border;
}

@mixin border-reset {
	border-top: none;
	border-bottom: none;
	border-right: none;
	border-left: none;
}
@mixin margin-reset {
	margin-top: 0;
	margin-bottom: 0;
	margin-right: 0;
	margin-left: 0;
}

@mixin textblock {
	margin: 0 auto;
	max-width: $textblock-width;
}

@mixin outer-block {
	width: 100%;
	max-width: 100%;
	padding: $block-padding;
	@include border;
}


/*
 * Mixin for basic CSS triangles
 * @include triangle(up, #000, 50px)
*/
@mixin triangle($direction:up, $color:#000, $size:100px) {
	@if($direction == up) {
		border-color: transparent transparent $color;
		border-style: solid;
		border-width: 0 $size $size;
		height: 0;
		width: 0;
	}
	@if($direction == down) {
		border-color: $color transparent transparent transparent;
		border-style: solid;
		border-width: $size;
		height:0;
		width:0;
	}
	@if($direction == left) {
		border-color: transparent $color transparent transparent;
		border-style: solid;
		border-width: $size $size $size 0;
		height: 0;
		width: 0;
	}
	@if($direction == right) {
		border-color: transparent transparent transparent $color;
		border-style: solid;
		border-width: $size 0 $size $size;
		height:0;
		width:0;
	}
}

/*
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname', 'normal', 'normal');
 */

@mixin fontface($font-family, $font-url, $font-name, $font-weight, $font-style) {
	@font-face {
		font: {
			family: $font-family;
			style: $font-style;
			weight: $font-weight;
		}
		src: url($font-url + '/' + $font-name + '.eot');
		src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
			 url($font-url + '/' + $font-name + '.woff') format('woff'),
			 url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
			 url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
	}
}

// Border Radius

// Always a handy mixin. Set every border radius or just a single side without worrying about all those prefixes.

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
   -webkit-border-top-left-radius: $radius;
   border-top-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
     -webkit-border-top-right-radius: $radius;
     border-top-right-radius: $radius;
     background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
   -webkit-border-bottom-left-radius: $radius;
   border-bottom-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
     -webkit-border-top-left-radius: $radius;
     border-top-left-radius: $radius;
     background-clip: padding-box;
}

/* Transitions */

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}
// Example: @include transition(all, 0.3s, ease-in-out);




// Center-align a block level element

// Quickly center any element within its parent. Requires width or max-width to be set.

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Font Size

// This mixin sets the font size in rem's with a px fallback.

@mixin font-size($sizeValue: 12 ){
  font-size: $sizeValue + px; //fallback for old browsers
  font-size: (0.125 * $sizeValue) + rem;
}

// Line Height

// This mixin sets the line height in rem's with a px fallback.

@mixin line-height($heightValue: 12 ){
	line-height: $heightValue + px; //fallback for old browsers
	line-height: (0.125 * $heightValue) + rem;
}


// Rem mixin
// http://davidensinger.com/2013/03/using-rems-with-sass/

@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: $base-font-size;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}
@mixin box-shadow($horizontal: 0px, $vertical: 1px, $blur: 2px, $color: #CCC) {
  -webkit-box-shadow: $horizontal $vertical $blur $color;
  -moz-box-shadow: $horizontal $vertical $blur $color;
  box-shadow: $horizontal $vertical $blur $color;
}

/**
 *
 *	Colors
 *
 */

@mixin light-text-dark-bg {
	color: $white;
	a {
		&:link, &:visited {
			color:  $white;
			border-bottom-color: $white;
		}
		&:hover {
			color: $bright-white;
			border-bottom-color: $bright-white;
		}
		&:active {
			color: $bright-white;
			border-bottom-color: $bright-white;
		}
	}
}

@mixin palette-3 { /* Blue on Yellow */
	h1, h2, h3, h4, h5, h6 {
		color: $color_blue;
	}
	background-color: $color_yellow;
	a {
		&:link, &:visited {
			color: $color_blue;
			border-bottom: 1px solid rgba(0,0,0,.1);
		}
		&:hover {
			border-bottom: 1px solid rgba(0,0,0,.3);
		}
		&:active {
			border-bottom: 1px solid rgba(0,0,0,.6);
		}
	}
}

@mixin palette-4 { /* Yellow on Red */
	h1, h2, h3, h4, h5, h6 {
		color: $color_yellow;
	}
	background-color: $color_red;
	a {
		&:link, &:visited {
			color: $color_yellow;
			border-bottom: 1px solid rgba(0,0,0,.1);
		}
		&:hover {
			border-bottom: 1px solid rgba(0,0,0,.3);
		}
		&:active {
			border-bottom: 1px solid rgba(0,0,0,.6);
		}
	}
}
@mixin inline-form( $inputs ){
	display: table;
	width: 100%;
	vertical-align: bottom;
	div {
		width: 100%;
		vertical-align: bottom;
		&[type="submit"] {
			width: auto;
		}
	}
  	@if $inputs == 3 {
		@include breakpoint( $tablet ) {
			div {
				width: 33.333%;
				display: table-cell;
				padding-right: 10px;
			}
		}
	} 
	@else if $inputs == 2 {
		@include breakpoint( $tablet ) {
			div {
				width: 50%;
				display: table-cell;
				padding-right: 10px;
			}
		}
	}
}

%no-bullets {
	margin: 0; 
	padding: 0;
	list-style-type: none;
}

// Vertical alignment
%vertical-align {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

// Multi-line text highlight
// http://codepen.io/chriscoyier/pen/hIvFe
%padded-multiline { 
	padding: 0.1538461538461538rem 0; 
	margin: 20px auto;
	a:link, a:visited {
		// color: $white;
		border-bottom: none;
	}
	& > span,
	& > span p { 
		display: inline;
		padding: 0.5rem;
		/* Needs prefixing manually - autoprefixer doesn't do it */
		box-decoration-break: clone;
		-webkit-box-decoration-break: clone;
	}
}

// Circle
// https://gist.github.com/kogakure/4769904
@mixin circle($width, $color) {
  width: $width;
  height: $width;
  background: $color;
  -webkit-border-radius: $width/2;
     -moz-border-radius: $width/2;
          border-radius: $width/2;
}
@mixin card($color:$neutral) {
	display: block;
	text-align: center;
	padding: $block-padding;
	background-color: $color-neutral-ultra-tinted;
	@include border-radius($input-border-radius);
	background-color: $color; 
	@include border-reset;
}

@mixin block-link {
	display: block;
	text-align: center;
	@include border-reset;
}

@mixin section($size) {
	// Size
	@if( $size == peta ) {
		padding: $section-padding-peta;
	} @else if( $size == giga ) {
		padding: $section-padding-giga;
	} @else if( $size == mega ) {
		padding: $section-padding-mega;
	} @else if( $size == kilo ) {
		padding: $section-padding-kilo;
	} @else if( $size == default ) {
		padding: $section-padding-default;
	} @else if( $size == micro ) {
		padding-top: 2rem;
		padding-bottom: 2rem;
	} @else if( $size == nano ) {
		padding-top: 1.5rem;
		padding-bottom: 1.5rem;
	} @else if( $size == pico ) {
		padding-top: 1rem;
		padding-bottom: 1rem;
	}
}
@mixin hide-placeholders {
    ::-webkit-input-placeholder { /* WebKit browsers */
        color: transparent;
    }
    :-moz-placeholder { /* Mozilla Firefox 4 to 18 */
       color: transparent;
    }
    ::-moz-placeholder { /* Mozilla Firefox 19+ */
       color: transparent;
    }
    :-ms-input-placeholder { /* Internet Explorer 10+ */
       color: transparent;
    }

    textarea::-webkit-input-placeholder { /* WebKit browsers */
        color: transparent;
    }
    textarea:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
       color: transparent;
    }
    textarea::-moz-placeholder { /* Mozilla Firefox 19+ */
       color: transparent;
    }
    textarea:-ms-input-placeholder { /* Internet Explorer 10+ */
       color: transparent;
    }
}